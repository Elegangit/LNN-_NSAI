<script> 
import lnn
#1
graph = lnn.Graph()

A = graph.add_node("A")
B = graph.add_node("B")
C = graph.add_node("C")

graph.add_edge(A, B, lnn.Rule.AND)
graph.add_edge(B, C, lnn.Rule.OR)


A.add_data(lnn.Fact.TRUE)
B.add_data(lnn.Fact.FALSE)
C.add_data(lnn.Fact.TRUE)

graph.infer()

print(graph.nodes)


#2

graph = lnn.Graph()

# Add nodes to the graph
A = graph.add_node("A")
B = graph.add_node("B")
C = graph.add_node("C")

graph.add_edge(A, B, lnn.Rule.AND)
graph.add_edge(B, C, lnn.Rule.OR)

A.add_data(lnn.Fact.TRUE)
B.add_data(lnn.Fact.FALSE)
C.add_data(lnn.Fact.TRUE)

graph.infer()

for node in graph.nodes:
    print(f"{node.name}: {node.get_truth_value()}")

#3
graph = lnn.Graph()

B = graph.add_node("B")
D = graph.add_node("D")
E = graph.add_node("E")

graph.add_edge(B, D, lnn.Rule.OR)
graph.add_edge(D, E, lnn.Rule.OR)

B.add_data(lnn.Fact.TRUE)
D.add_data(lnn.Fact.FALSE)
E.add_data(lnn.Fact.TRUE)

# Query the logical disjunction between nodes B, D, and E
disjunction = graph.query(B, D, E, lnn.Rule.OR)

# Print the result
print(disjunction)

#4 
B: TRUE
D: FALSE
E: TRUE

Aniqa Afzal, IS800 course credit and IBM Badge 10% request. Dr, Song
</script>

