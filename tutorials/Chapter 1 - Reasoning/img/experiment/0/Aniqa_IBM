
import lnn
#1
graph = lnn.Graph()

A = graph.add_node("A")
B = graph.add_node("B")
C = graph.add_node("C")

graph.add_edge(A, B, lnn.Rule.AND)
graph.add_edge(B, C, lnn.Rule.OR)


A.add_data(lnn.Fact.TRUE)
B.add_data(lnn.Fact.FALSE)
C.add_data(lnn.Fact.TRUE)

graph.infer()

print(graph.nodes)


#2

graph = lnn.Graph()

# Add nodes to the graph
A = graph.add_node("A")
B = graph.add_node("B")
C = graph.add_node("C")

graph.add_edge(A, B, lnn.Rule.AND)
graph.add_edge(B, C, lnn.Rule.OR)

A.add_data(lnn.Fact.TRUE)
B.add_data(lnn.Fact.FALSE)
C.add_data(lnn.Fact.TRUE)

graph.infer()

for node in graph.nodes:
    print(f"{node.name}: {node.get_truth_value()}") 


#3
class Node {
    constructor(name) {
        this.name = name;
        this.data = null;
        this.edges = [];
    }

    addData(data) {
        this.data = data;
    }

    addEdge(node) {
        this.edges.push(node);
    }
}

class Graph {
    constructor() {
        this.nodes = [];
    }

    addNode(name) {
        const node = new Node(name);
        this.nodes.push(node);
        return node;
    }

    query(...nodes) {
        // Example logic for logical OR: returns true if any node is TRUE
        return nodes.some(node => node.data === true);
    }
}

// Create the graph
const graph = new Graph();

const B = graph.addNode("B");
const D = graph.addNode("D");
const E = graph.addNode("E");

B.addData(true);
D.addData(false);
E.addData(true);

// Add edges (though not used in the query here)
B.addEdge(D);
D.addEdge(E);

// Query the logical disjunction between nodes B, D, and E
const disjunction = graph.query(B, D, E);

// Print the result
console.log(disjunction);  // This will log true




# From Aniqa Afzal, IS800 10% course credit and IBM NSAI Badge request. Dr.Song course. 

